{"version":3,"file":"Events/index.js","mappings":"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","sources":["webpack://custom-post-type-events/./src/Blocks/Events/edit.js","webpack://custom-post-type-events/./src/Blocks/Events/loop-control.js","webpack://custom-post-type-events/external window \"React\"","webpack://custom-post-type-events/external window \"ReactJSXRuntime\"","webpack://custom-post-type-events/external window [\"wp\",\"blockEditor\"]","webpack://custom-post-type-events/external window [\"wp\",\"blocks\"]","webpack://custom-post-type-events/external window [\"wp\",\"components\"]","webpack://custom-post-type-events/external window [\"wp\",\"data\"]","webpack://custom-post-type-events/external window [\"wp\",\"element\"]","webpack://custom-post-type-events/external window [\"wp\",\"i18n\"]","webpack://custom-post-type-events/external window [\"wp\",\"serverSideRender\"]","webpack://custom-post-type-events/webpack/bootstrap","webpack://custom-post-type-events/webpack/runtime/compat get default export","webpack://custom-post-type-events/webpack/runtime/define property getters","webpack://custom-post-type-events/webpack/runtime/hasOwnProperty shorthand","webpack://custom-post-type-events/webpack/runtime/make namespace object","webpack://custom-post-type-events/./src/Blocks/Events/index.js"],"sourcesContent":["import ServerSideRender from '@wordpress/server-side-render';\nimport LoopControl from './loop-control';\nimport { useBlockProps } from '@wordpress/block-editor';\nimport React from 'react';\n\nconst Edit = ({ attributes, setAttributes }) => {\n    return (\n        <div {...useBlockProps()}>\n            <LoopControl\n                postType=\"event\"\n                {...attributes}\n                setAttributes={setAttributes}\n            />\n            <ServerSideRender\n                block=\"custom-post-type-events/events\"\n                attributes={attributes}\n            />\n        </div>\n    );\n};\n\nexport default Edit;\n","import React from 'react';\nimport { useSelect } from '@wordpress/data';\nimport { __ } from \"@wordpress/i18n\";\nimport {\n    Fragment\n} from '@wordpress/element';\nimport {\n    PanelBody,\n    RangeControl,\n    SelectControl,\n    FormTokenField,\n    Toolbar,\n} from '@wordpress/components';\nimport { InspectorControls, BlockControls } from '@wordpress/block-editor';\n\nconst LoopControl = (props) => {\n    const {\n        setAttributes,\n        order,\n        orderBy,\n        numberOfItems,\n        orderByValues,\n        offset,\n        postIn,\n        postType,\n        showPostsMax,\n        offsetMax,\n        postLayout,\n        gridColumns,\n        gridColumnsMax,\n        useGrid\n    } = props;\n\n    const { posts, postTaxonomies, postTypeData } = useSelect((select) => {\n        const { getEntityRecords, getTaxonomy, getPostType } = select(\"core\");\n        // @ts-ignore\n        const postTypeData = getPostType(postType);\n        const postTaxonomiesData = [];\n        let postsData = [];\n\n        if (postTypeData && postTypeData.taxonomies) {\n            postTypeData.taxonomies.map(tax => {\n                // @ts-ignore\n                const taxonomy = getTaxonomy(tax);\n                if (taxonomy) {\n                    // @ts-ignore\n                    taxonomy.terms = getEntityRecords(\"taxonomy\", tax, { per_page: 100 });\n                    postTaxonomiesData.push(taxonomy);\n                }\n            });\n        }\n\n        // @ts-ignore\n        postsData = getEntityRecords(\"postType\", props.postType, {\n            per_page: 100,\n        });\n\n        return {\n            postTypeData,\n            posts: postsData,\n            postTaxonomies: postTaxonomiesData,\n        };\n    }, [props.postType]);\n\n    const gridColumnsMaxValue = (gridColumnsMax) ? gridColumnsMax : 12;\n\n    const layoutControls = [\n        {\n            icon: 'list-view',\n            title: __('List View'),\n            onClick: () => setAttributes({ postLayout: 'list', gridColumns: -1 }),\n            isActive: postLayout === 'list',\n        },\n        {\n            icon: 'grid-view',\n            title: __('Grid View'),\n            onClick: () => setAttributes({ postLayout: 'grid', gridColumns: 4 }),\n            isActive: postLayout === 'grid',\n        },\n    ];\n\n    const taxonomySelects = [];\n    const orderByValue = [orderBy, order].join('/');\n    const orderBySelectValues = (orderByValues) ? orderByValues : [\n        {\n            value: \"title/asc\",\n            label: __(\"A → Z\")\n        },\n        {\n            value: \"date/desc\",\n            label: __(\"Newest to Oldest\")\n        },\n        {\n            value: \"date/asc\",\n            label: __(\"Oldest to Newest\")\n        },\n        {\n            value: \"menu_order/asc\",\n            label: __(\"Menu order\")\n        },\n    ];\n\n    const showPostsMaxValue = (showPostsMax) ? showPostsMax : 100;\n\n    const offsetMaxValue = (offsetMax) ? offsetMax : 100;\n\n    const snakeToCamel = (str) => str.replace(\n        /([-_][a-z])/g,\n        (group) => group.toUpperCase()\n            .replace('-', '')\n            .replace('_', '')\n    );\n\n    if (postTaxonomies) {\n        postTaxonomies.map((taxonomy, index) => {\n            let termsFieldValue = [];\n            if (taxonomy.terms !== null) {\n                let selectedTerms = (props[snakeToCamel(taxonomy.slug)]) ? props[snakeToCamel(taxonomy.slug)] : [];\n                termsFieldValue = selectedTerms.map((termId) => {\n                    let wantedTerm = taxonomy.terms.find((term) => term.id === termId);\n                    return (wantedTerm === undefined || !wantedTerm) ? false : wantedTerm.name;\n                });\n            }\n            if (!taxonomy.terms) taxonomy.terms = [];\n            taxonomySelects.push(\n                <PanelBody\n                    key={`taxonomy-${index}`}\n                    title={taxonomy.name}\n                >\n                    <FormTokenField\n                        value={termsFieldValue}\n                        suggestions={taxonomy.terms.map(term => term.name)}\n                        onChange={(selectedTerms) => {\n                            let selectedTermsArray = [];\n                            selectedTerms.map(\n                                (termName) => {\n                                    const matchingTerm = taxonomy.terms.find((term) => {\n                                        return term.name === termName;\n\n                                    });\n                                    if (matchingTerm !== undefined) {\n                                        selectedTermsArray.push(matchingTerm.id);\n                                    }\n                                }\n                            )\n                            let attr = [];\n                            attr[snakeToCamel(taxonomy.slug)] = selectedTermsArray;\n                            attr = { ...attr }\n                            setAttributes(attr)\n                        }}\n                    />\n                </PanelBody>\n            );\n        });\n    }\n\n    let postsFieldValue = [];\n    let postNames = [];\n    if (posts !== null && posts.length && postIn) {\n        posts.map(post => {\n            postNames.push(post.title.raw);\n        })\n        postsFieldValue = postIn.map((postId) => {\n            let wantedPost = posts.find((post) => post.id === postId);\n            return (wantedPost === undefined || !wantedPost) ? false : wantedPost.title.raw;\n        });\n    }\n    return (\n        <Fragment>\n            {useGrid && (\n                <BlockControls>\n                    <Toolbar\n                        // @ts-ignore\n                        controls={layoutControls} />\n                </BlockControls>\n            )}\n            <InspectorControls>\n                {taxonomySelects}\n\n                {!postsFieldValue &&\n                    <PanelBody title={__(\"Order\")}>\n                        <SelectControl\n                            value={orderByValue}\n                            onChange={orderByValue => {\n                                const [orderBy, order] = orderByValue.split('/');\n                                setAttributes({\n                                    orderBy,\n                                    order,\n                                })\n                            }}\n                            options={orderBySelectValues}\n                        />\n                    </PanelBody>\n                }\n\n                <PanelBody title={__(\"Number of items\")}>\n                    <RangeControl\n                        value={numberOfItems}\n                        onChange={numberOfItems => { setAttributes({ numberOfItems }) }}\n                        min={1}\n                        max={showPostsMaxValue}\n                        required\n                    />\n                </PanelBody>\n\n                {postLayout == 'grid' && (\n                    <PanelBody title={__(\"Grid columns\")}>\n                        <RangeControl\n                            value={gridColumns}\n                            onChange={gridColumns => { setAttributes({ gridColumns }) }}\n                            min={1}\n                            max={gridColumnsMaxValue}\n                        />\n                    </PanelBody>\n                )}\n\n                <PanelBody title={__(\"Offset\")}>\n                    <RangeControl\n                        value={offset}\n                        onChange={offset => { setAttributes({ offset }) }}\n                        min={0}\n                        max={offsetMaxValue}\n                        required\n                    />\n                </PanelBody>\n\n                {posts && (\n                    <PanelBody title={postTypeData.name}>\n                        <FormTokenField\n                            label=\"\"\n                            value={postsFieldValue}\n                            suggestions={postNames}\n                            maxSuggestions={20}\n                            onChange={(selectedPosts) => {\n                                let selectedPostsArray = [];\n                                selectedPosts.map(\n                                    (postName) => {\n                                        const matchingPost = posts.find((post) => {\n                                            return post.title.raw === postName;\n\n                                        });\n                                        if (matchingPost !== undefined) {\n                                            selectedPostsArray.push(matchingPost.id);\n                                        }\n                                    }\n                                )\n                                setAttributes({ postIn: selectedPostsArray });\n                            }}\n                        />\n                    </PanelBody>\n                )}\n            </InspectorControls>\n        </Fragment>\n    );\n}\n\nexport default LoopControl;","module.exports = window[\"React\"];","module.exports = window[\"ReactJSXRuntime\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"serverSideRender\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\nimport block from './block.json';\nimport edit from './edit';\n\nregisterBlockType(block, { edit });\n\n"],"names":["ServerSideRender","LoopControl","useBlockProps","React","jsx","_jsx","jsxs","_jsxs","Edit","attributes","setAttributes","children","postType","block","useSelect","__","Fragment","PanelBody","RangeControl","SelectControl","FormTokenField","Toolbar","InspectorControls","BlockControls","props","order","orderBy","numberOfItems","orderByValues","offset","postIn","showPostsMax","offsetMax","postLayout","gridColumns","gridColumnsMax","useGrid","posts","postTaxonomies","postTypeData","select","getEntityRecords","getTaxonomy","getPostType","postTaxonomiesData","postsData","taxonomies","map","tax","taxonomy","terms","per_page","push","gridColumnsMaxValue","layoutControls","icon","title","onClick","isActive","taxonomySelects","orderByValue","join","orderBySelectValues","value","label","showPostsMaxValue","offsetMaxValue","snakeToCamel","str","replace","group","toUpperCase","index","termsFieldValue","selectedTerms","slug","termId","wantedTerm","find","term","id","undefined","name","suggestions","onChange","selectedTermsArray","termName","matchingTerm","attr","postsFieldValue","postNames","length","post","raw","postId","wantedPost","controls","split","options","min","max","required","maxSuggestions","selectedPosts","selectedPostsArray","postName","matchingPost","registerBlockType","edit"],"sourceRoot":""}